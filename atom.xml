<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PY.ru &amp; 博客</title>
  
  
  <link href="http://xi-xi6767.github.io/atom.xml" rel="self"/>
  
  <link href="http://xi-xi6767.github.io/"/>
  <updated>2023-07-03T15:58:01.700Z</updated>
  <id>http://xi-xi6767.github.io/</id>
  
  <author>
    <name>噗噗</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阿里云配置云服务器</title>
    <link href="http://xi-xi6767.github.io/2023/07/03/%E9%98%BF%E9%87%8C%E4%BA%91%E9%85%8D%E7%BD%AE%E4%BA%91%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://xi-xi6767.github.io/2023/07/03/%E9%98%BF%E9%87%8C%E4%BA%91%E9%85%8D%E7%BD%AE%E4%BA%91%E7%AB%AF%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2023-07-03T15:58:54.179Z</published>
    <updated>2023-07-03T15:58:01.700Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阿里云配置云服务器"><a href="#阿里云配置云服务器" class="headerlink" title="阿里云配置云服务器"></a>阿里云配置云服务器</h1><h2 id="1，阿里云"><a href="#1，阿里云" class="headerlink" title="1，阿里云"></a>1，阿里云</h2><p>先注册一个阿里云账号直接登录，可以支付宝直接扫码。然后点击立即试用。</p><p><img src="http://m.qpic.cn/psc?/V54JPsip0p3g7p33fzVG2nACdo4KZtfa/ruAMsa53pVQWN7FLK88i5vNxU5gqkvrO.K*vNipXKrJxAqUpJISTCJD3K204qyeopXpq9NivrtDuXPhdKWfuID8ih7DazG*3*aTuW2zkRgU!/mnull&bo=9AEKAgAAAAABB90!&rf=photolist&t=5"></p><p>然后选择操作系统CentOS，别的全部跳过，点击确定提交。</p><p><img src="http://m.qpic.cn/psc?/V54JPsip0p3g7p33fzVG2nACdo4KZtfa/ruAMsa53pVQWN7FLK88i5vNxU5gqkvrO.K*vNipXKrIaO1XuMBlFxtdvkipe9eig6YmHQd7hx4ZWNJIIgvwjMr59mW1nenk47hW6nzP0JGI!/mnull&bo=1gOHAQAAAAABB3M!&rf=photolist&t=5" alt="x"></p><p>进入实例后点击最右边的三个点，选择重置实例密码，然后输入你需要设置的密码。如果提示需要最新版云助手，可以先把实例关闭，再重新启动，然后设置密码。</p><h2 id="3，搜索宝塔，安装面板"><a href="#3，搜索宝塔，安装面板" class="headerlink" title="3，搜索宝塔，安装面板"></a>3，搜索宝塔，安装面板</h2><p>进入<a href="https://www.bt.cn/new/index.html">宝塔</a>之后，点击立即免费安装.</p><p><img src="http://m.qpic.cn/psc?/V54JPsip0p3g7p33fzVG2nACdo4KZtfa/ruAMsa53pVQWN7FLK88i5qkchbjFyXzEKhPD66ok74Q6pts58q0j0ZXxi.OoBwnI19pgVEjnY.EInsA2VR4.zu.N7d9LLc54XLNYqIP8D0o!/mnull&bo=KgZ*AwAAAAABB3A!&rf=photolist&t=5" alt="liji"></p><p>然后下滑一直到linux在线安装，去阿里云你的实例那里复制公用的IP地址粘贴到服务器IP这里，端口号默认22，SSH账号默认root，验证方法默认密码验证，然后输入你设置的密码，点击立即安装到服务器。</p><p><img src="http://m.qpic.cn/psc?/V54JPsip0p3g7p33fzVG2nACdo4KZtfa/ruAMsa53pVQWN7FLK88i5qkchbjFyXzEKhPD66ok74QzxdgSb.4XsF5OahwVrmDupnjsNVQ8LE1wsdRiFgI0DAIwyN5qmrtStgdovBHHFyc!/mnull&bo=ngRwAwAAAAADB8s!&rf=photolist&t=5" alt="tt"></p><p>可能会提示需要用安装脚本安装，这时候，我们需要回到阿里云，点击实例最右侧的三个点，再点击VCN远程连接，第一次进入点击重置VNC密码，</p><p><img src="http://m.qpic.cn/psc?/V54JPsip0p3g7p33fzVG2nACdo4KZtfa/ruAMsa53pVQWN7FLK88i5hKa0L8s2Jf43*zsejQreiTLKQWOxwykt7gWpspwNtFqaKhc3cnxS6Ibj81DjYXJvJAP3A14kpqm*xr.d4s7Sx4!/mnull&bo=FwNjAQAAAAABB1Y!&rf=photolist&t=5" alt="haha"></p><p>然后输入你的密码提交，登录之后我们会进入终端：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">这个方法比较简单，只需输入两行命令即可，但是我没用过</span><br><span class="line"></span><br><span class="line">sed -i &#x27;s/PermitRootLogin no/PermitRootLogin yes/g&#x27; /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">sed -i &#x27;s/PasswordAuthentication no/PasswordAuthentication yes/g&#x27; /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">最后重启服务器</span><br><span class="line"></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">介绍一个我用过的</span><br><span class="line">先输入：</span><br><span class="line"></span><br><span class="line">vi /etc/ssh/sshd_config </span><br><span class="line"></span><br><span class="line">进入到文件之后，点击ctl+\进入编辑模式</span><br><span class="line">再一直点击向下的箭头到最后一行，改成</span><br><span class="line"></span><br><span class="line">PasswordAuthentication yes //默认为no，改为yes开启密码登陆</span><br><span class="line"></span><br><span class="line">然后按 esc 退出编辑模式，按 shift + : 输入:wq</span><br><span class="line">esc</span><br><span class="line">shift + :</span><br><span class="line">:wq</span><br><span class="line"></span><br><span class="line">最后重启ssh服务</span><br><span class="line"></span><br><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><p>这样则是成功了。<img src="http://m.qpic.cn/psc?/V54JPsip0p3g7p33fzVG2nACdo4KZtfa/ruAMsa53pVQWN7FLK88i5ubBS6QMPHLRB*Asd87ktadgXqIkhGG6i8QpiAmszD1gDSsoZm8Viy7qHdDx.r8OPCxMMhoCyAksmKHC4AlI.XI!/b&bo=TAK2AAAAAAADB9o!&rf=viewer_4&t=5"></p><p>再回到宝塔点击立即安装到服务器，选择仅宝塔面板，安装成功后会弹出一个页面，请保存好面板地址，用户名和密码。复制粘贴保存好。</p><p><img src="http://m.qpic.cn/psc?/V54JPsip0p3g7p33fzVG2nACdo4KZtfa/ruAMsa53pVQWN7FLK88i5ictQcnD1AapZjbX1U0eY6HCMLv1VtaJ*3febQusWaZsDw1wkFaLtRN3kIdb453gVK*UEPQqCpHO*dvQCrF8WxE!/mnull&bo=GgPmAQAAAAADB9w!&rf=photolist&t=5" alt="haha"></p><h2 id="4，配置端口"><a href="#4，配置端口" class="headerlink" title="4，配置端口"></a>4，配置端口</h2><p>回到阿里云，点击最左侧靠下的安全组。</p><p><img src="http://m.qpic.cn/psc?/V54JPsip0p3g7p33fzVG2nACdo4KZtfa/ruAMsa53pVQWN7FLK88i5qkchbjFyXzEKhPD66ok74T53z77oUJW6rCO*C9chu0.d84KdnzyD3bL3.ap9k71yynwCqjaKeDU9Ff6pAZnQjs!/a&bo=HwE9AQAAAAABFxI!&rf=viewer_0&t=5" alt="anquanzu"></p><p>再点击实例最右侧的管理规则，</p><p><img src="http://m.qpic.cn/psc?/V54JPsip0p3g7p33fzVG2nACdo4KZtfa/ruAMsa53pVQWN7FLK88i5ubBS6QMPHLRB*Asd87ktaeYxd.HnGaYg*ICGzSINAPh3rFoOULVGoyTes8w4EbKrgdndcgLTpW2pFHj4jUaxYY!/mnull&bo=MgEQAQAAAAABBwI!&rf=photolist&t=5" alt="guanliguize"></p><p>进入之后添加端口，8888， 21， 80， 3306， 22</p><p><img src="http://m.qpic.cn/psc?/V54JPsip0p3g7p33fzVG2nACdo4KZtfa/ruAMsa53pVQWN7FLK88i5hKa0L8s2Jf43*zsejQreiSniNjymX5LyuJKBHiM9cp*RxrxV75dePdoZN9UHO31DaCvDRoZkE3ogUAbz0R0.wY!/mnull&bo=NQVBAgAAAAABB1M!&rf=photolist&t=5" alt="aa"></p><h2 id="5，进入刚刚宝塔安装成功后弹出的网址"><a href="#5，进入刚刚宝塔安装成功后弹出的网址" class="headerlink" title="5，进入刚刚宝塔安装成功后弹出的网址"></a>5，进入刚刚宝塔安装成功后弹出的网址</h2><p>进入后，会提醒你绑定宝塔账号，先注册一个。</p><p><img src="http://m.qpic.cn/psc?/V54JPsip0p3g7p33fzVG2nACdo4KZtfa/ruAMsa53pVQWN7FLK88i5ictQcnD1AapZjbX1U0eY6E8Bba.nxLSesi5XyFa34iL.HG*BnOuKwC9bcISNY5llC9rQ74p9Ey9qN9CTUvjtRo!/mnull&bo=0gPiAgAAAAADBxM!&rf=photolist&t=5" alt="baotalogin1"></p><p>注册成功之后，再重新进入刚刚宝塔安装成功后弹出的网址，输入你刚刚注册的宝塔账号密码绑定成功，然后再输入宝塔安装成功后保存的用户名和密码，登陆进入后，选择最左侧下方的软件商店。</p><p><img src="http://m.qpic.cn/psc?/V54JPsip0p3g7p33fzVG2nACdo4KZtfa/ruAMsa53pVQWN7FLK88i5ubBS6QMPHLRB*Asd87ktacx7sseJ5DRXp9ZmwCakdfJF9bQkqs8nAoLhNkNfzTUZMU.md.ZnqzQIsem2wWraec!/mnull&bo=EQRJAgAAAAADB3w!&rf=photolist&t=5" alt="ruanjian"></p><p>搜索安装mysql默认版本，Nginx默认版本，以及Tomcat9.0版本。然后点击tomcat后面的设置，在选择配置，下滑到69行，将8080更改为80。</p><p><img src="http://m.qpic.cn/psc?/V54JPsip0p3g7p33fzVG2nACdo4KZtfa/ruAMsa53pVQWN7FLK88i5iRYT9oUgOPb*54Zcqvtg.DpBbHokM.0ZQq5xFrbg.n72EuuIBV.iHy4l5pp30TvwS3JFjDg2JRA3khABlQmGns!/mnull&bo=ZwVMAgAAAAADBw4!&rf=photolist&t=5" alt="tomcat"></p><p>到这里我们的服务器已经配置完成了！撒花！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;阿里云配置云服务器&quot;&gt;&lt;a href=&quot;#阿里云配置云服务器&quot; class=&quot;headerlink&quot; title=&quot;阿里云配置云服务器&quot;&gt;&lt;/a&gt;阿里云配置云服务器&lt;/h1&gt;&lt;h2 id=&quot;1，阿里云&quot;&gt;&lt;a href=&quot;#1，阿里云&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="阿里云" scheme="http://xi-xi6767.github.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    <category term="宝塔" scheme="http://xi-xi6767.github.io/tags/%E5%AE%9D%E5%A1%94/"/>
    
  </entry>
  
  <entry>
    <title>关于HEXO更新博客报错Spawn failed</title>
    <link href="http://xi-xi6767.github.io/2023/07/02/%E5%85%B3%E4%BA%8EHEXO%E6%9B%B4%E6%96%B0%E6%8A%A5%E9%94%99Spawn-failed/"/>
    <id>http://xi-xi6767.github.io/2023/07/02/%E5%85%B3%E4%BA%8EHEXO%E6%9B%B4%E6%96%B0%E6%8A%A5%E9%94%99Spawn-failed/</id>
    <published>2023-07-02T13:20:14.146Z</published>
    <updated>2023-07-03T16:39:00.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于HEXO更新博客报错Spawn-failed"><a href="#关于HEXO更新博客报错Spawn-failed" class="headerlink" title="关于HEXO更新博客报错Spawn failed"></a>关于HEXO更新博客报错Spawn failed</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>今天下午在使用<code>hexo d -g</code>命令进行博客部署时遇到了名为<code>Spawn failed</code>的报错</p><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>在网上通过简单的查询之后发现问题出在<code>.deploy_git</code>文件夹中，这个文件夹是<code>hexo</code>框架渲染生成的所有文件的一个本地<code>git</code>仓库，<code>hexo d</code>命令就是将整个<code>.deploy_git</code>文件夹的内容push到GitHub上的。</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>方式一：</p><ul><li>删除<code>.deploy_git</code>文件之后</li><li>执行命令行<code>git config --global core.autocrlf false</code></li><li>最后：<code>hexo d</code></li></ul><p>这个的问题大多是因为git进行<code>push</code>或者<code>hexo d</code>的时候改变了一些<code>.deploy_git</code>文件下的内容。</p><p>方式二：</p><p>首先用文本编辑器(我使用的是Notepad++)打开博客文件夹(通常是<strong>\blog</strong>)中的 _config.yml 配置文件</p><p>修改配置文件中的repo</p><pre><code># Deployment## Docs: https://hexo.io/docs/one-command-deploymentdeploy:  type: git  repo:https://github.com/YourName/YourName.github.io.git(不要使用这个)          git@github.com:YourName/YourName.github.io.git(用这个)  branch: master</code></pre><p>重新执行<code>hexo c </code> <code>hexo g</code>  <code>hexo d</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;关于HEXO更新博客报错Spawn-failed&quot;&gt;&lt;a href=&quot;#关于HEXO更新博客报错Spawn-failed&quot; class=&quot;headerlink&quot; title=&quot;关于HEXO更新博客报错Spawn failed&quot;&gt;&lt;/a&gt;关于HEXO更新博客报错Sp</summary>
      
    
    
    
    
    <category term="hexo" scheme="http://xi-xi6767.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Session技术 JSP</title>
    <link href="http://xi-xi6767.github.io/2023/07/02/Session%E6%8A%80%E6%9C%AF%20JSP/"/>
    <id>http://xi-xi6767.github.io/2023/07/02/Session%E6%8A%80%E6%9C%AF%20JSP/</id>
    <published>2023-07-02T12:06:23.939Z</published>
    <updated>2023-07-02T12:15:54.733Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Session技术-JSP"><a href="#Session技术-JSP" class="headerlink" title="Session技术 JSP"></a>Session技术 JSP</h1><p>HTTP是无状态协议，所以每次客户端研所网页时，都要单独打开一个服务器连接，因此服务器不会记录先前客户端请求的任何信息。</p><h2 id="三种方法来维持客户端与服务器的会话："><a href="#三种方法来维持客户端与服务器的会话：" class="headerlink" title="三种方法来维持客户端与服务器的会话："></a>三种方法来维持客户端与服务器的会话：</h2><blockquote><h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3><p>网络服务器可以指定一个唯一的session ID作为cookie来代表每个客户端，用来识别每个客户端接下来的请求。</p><p>但是这个请求可能并不会生效，因为很多时候服务器并不一定支持cookie，所以不建议使用这种方法维持会话。</p></blockquote><blockquote><p>###隐藏表单域</p><p>一个网络服务器可以发送一个隐藏的HTML表单域和一个唯一的session ID，像下面这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sessionid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12345&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个条目意味着，当表单被提交时，指定的名称和值将会自动包含在GET或POST数据中。每当浏览器发送一个请求，session_id的值就可以用来保存不同浏览器的轨迹。</p><p>这可能是一个有效的方式，但是点击<A HERF>标签中的超链接不会产生表单提交事件，因此隐藏表单域也不支持通用会话跟踪。</p></blockquote><blockquote><p>###重写URL</p><p>您可以在每个URL后面添加一些额外的数据来区分会话，服务器能够根据这些数据来关联session标识符。</p><p>举例来说，http://XXX.htm;sessionid=12345， session标识符为sessionid=12345，服务器可以用这个数据来识别客户端。</p><p>相比而言，重写URL是更好的方式来，就算浏览器不支持cookies也能工作，但缺点是您必须为每个URL动态指定session ID，就算这是个简单的HTML页面。</p></blockquote><blockquote><p>###session对象</p><p>除了以上几种方法外，JSP利用servlet提供的HttpSession接口来识别一个用户，存储这个用户的所有访问信息。</p><p>默认情况下，JSP允许会话跟踪，一个新的HttpSession对象将会自动地为新的客户端实例化。禁止会话跟踪需要显式地关掉它，通过将page指令中session属性值设为false来实现，就像下面这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page session=&quot;false&quot; %&gt;</span><br></pre></td></tr></table></figure><p>JSP引擎将隐含的session对象暴露给开发者。由于提供了session对象，开发者就可以方便地存储或检索数据。</p></blockquote><h2 id="session对象的一些重要方法："><a href="#session对象的一些重要方法：" class="headerlink" title="session对象的一些重要方法："></a>session对象的一些重要方法：</h2><table><thead><tr><th>S.N.</th><th>方法 &amp; 描述</th></tr></thead><tbody><tr><td>1</td><td>public Object getAttribute(String name) 返回sesson对象中与指定名称绑定的对象，如果不存在则返回null</td></tr><tr><td>2</td><td>public Enumeration getAttributeNmaes() 返回sesson对象中所有对象的名称</td></tr><tr><td>3</td><td>public long getCreationTime() 返回session对象被创建的时间， 以毫秒为单位，从1970年1月1号凌晨开始算起</td></tr><tr><td>4</td><td>public String getId() 返回session对象的ID</td></tr><tr><td>5</td><td>public long getLastAccessedTime() 返回客户端最后访问的时间，以毫秒为单位，从1970年1月1号凌晨开始算起</td></tr><tr><td>6</td><td>public int getMaxInactiveInterval() 返回最大时间间隔，以秒为单位，servlet 容器将会在这段时间内保持会话打开</td></tr><tr><td>7</td><td>public void invalidate() 将session无效化，解绑任何与该session绑定的对象</td></tr><tr><td>8</td><td>public boolean isNew() 返回是否为一个新的客户端，或者客户端是否拒绝加入session</td></tr><tr><td>9</td><td>public void removeAttribute(String name) 移除session中指定名称的对象</td></tr><tr><td>10</td><td>public void setAttribute(String name, Object value) 使用指定的名称和值来产生一个对象并绑定到session中</td></tr><tr><td>11</td><td>public void setMaxInactiveInterval(int interval) 用来指定时间，以秒为单位，servlet容器将会在这段时间内保持会话有效</td></tr></tbody></table><h2 id="JSP-session应用"><a href="#JSP-session应用" class="headerlink" title="JSP session应用"></a>JSP session应用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&lt;%@ page import=&quot;java.io.*,java.util.*&quot; %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">   // 获取session创建时间</span><br><span class="line">   Date createTime = new Date(session.getCreationTime());</span><br><span class="line">   // 获取最后访问页面的时间</span><br><span class="line">   Date lastAccessTime = new Date(session.getLastAccessedTime());</span><br><span class="line"></span><br><span class="line">   String title = &quot;再次访问菜鸟教程实例&quot;;</span><br><span class="line">   Integer visitCount = new Integer(0);</span><br><span class="line">   String visitCountKey = new String(&quot;visitCount&quot;);</span><br><span class="line">   String userIDKey = new String(&quot;userID&quot;);</span><br><span class="line">   String userID = new String(&quot;ABCD&quot;);</span><br><span class="line"></span><br><span class="line">   // 检测网页是否有新的访问用户</span><br><span class="line">   if (session.isNew())&#123;</span><br><span class="line">      title = &quot;访问菜鸟教程实例&quot;;</span><br><span class="line">      session.setAttribute(userIDKey, userID);</span><br><span class="line">      session.setAttribute(visitCountKey,  visitCount);</span><br><span class="line">   &#125; else &#123;</span><br><span class="line">       visitCount = (Integer)session.getAttribute(visitCountKey);</span><br><span class="line">       visitCount += 1;</span><br><span class="line">       userID = (String)session.getAttribute(userIDKey);</span><br><span class="line">       session.setAttribute(visitCountKey,  visitCount);</span><br><span class="line">   &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Session 跟踪&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Session 跟踪&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;table border=&quot;1&quot; align=&quot;center&quot;&gt; </span><br><span class="line">&lt;tr bgcolor=&quot;#949494&quot;&gt;</span><br><span class="line">   &lt;th&gt;Session 信息&lt;/th&gt;</span><br><span class="line">   &lt;th&gt;值&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt; </span><br><span class="line">&lt;tr&gt;</span><br><span class="line">   &lt;td&gt;id&lt;/td&gt;</span><br><span class="line">   &lt;td&gt;&lt;% out.print( session.getId()); %&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt; </span><br><span class="line">&lt;tr&gt;</span><br><span class="line">   &lt;td&gt;创建时间&lt;/td&gt;</span><br><span class="line">   &lt;td&gt;&lt;% out.print(createTime); %&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt; </span><br><span class="line">&lt;tr&gt;</span><br><span class="line">   &lt;td&gt;最后访问时间&lt;/td&gt;</span><br><span class="line">   &lt;td&gt;&lt;% out.print(lastAccessTime); %&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt; </span><br><span class="line">&lt;tr&gt;</span><br><span class="line">   &lt;td&gt;用户 ID&lt;/td&gt;</span><br><span class="line">   &lt;td&gt;&lt;% out.print(userID); %&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt; </span><br><span class="line">&lt;tr&gt;</span><br><span class="line">   &lt;td&gt;访问次数&lt;/td&gt;</span><br><span class="line">   &lt;td&gt;&lt;% out.print(visitCount); %&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt; </span><br><span class="line">&lt;/table&gt; </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>试着访问 <strong>http://localhost:8080/testjsp/main.jsp</strong> ，第一次运行时将会得到如下结果：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/01/sessjsp1.jpg" alt="img"></p><p>再次访问，将会得到如下结果：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/01/sessjsp2.jpg" alt="img"></p><h2 id="删除session数据"><a href="#删除session数据" class="headerlink" title="删除session数据"></a>删除session数据</h2><p>当处理完一个用户的会话数据后，您可以有如下选择：</p><ul><li><p><strong>移出一个特定属性</strong></p><p>调用public void removeAttribute(String name)  方法来移除指定的属性。</p></li><li><p><strong>删除整个会话：</strong></p><p>调用public void invalidate() 方法来使整个session无效。</p></li><li><p><strong>设置会话有效期：</strong></p><p>调用 public void setMaxInactiveInterval(int interval)  方法来设置session超时。</p></li><li><p><strong>登出用户：</strong></p><p>支持servlet2.4版本的服务器，可以调用 logout()方法来登出用户，并且使所有相关的session无效。</p></li><li><p><strong>配置web.xml文件：</strong></p><p>如果使用的是Tomcat，可以向下面这样配置web.xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>超时以分钟为单位，Tomcat中的默认的超时时间是30分钟。</p><p>Servlet中的getMaxInactiveInterval( ) 方法以秒为单位返回超时时间。如果在web.xml中配置的是15分钟，则getMaxInactiveInterval( ) 方法将会返回900。</p><h2 id="session生命周期"><a href="#session生命周期" class="headerlink" title="session生命周期"></a>session生命周期</h2><h3 id="session什么时候创建"><a href="#session什么时候创建" class="headerlink" title="session什么时候创建"></a>session什么时候创建</h3><p>Session一般存储在服务器的内存中，Sessinon在用户访问第一次访问服务器时创建(注意只有访问JSP、Servlet等程序时才会创建Session，只访问HTML、IMAGE等静态资源并不会创建Session)。当然，强制生成Session可使用request.getSession(true)方法。</p><h3 id="session什么时候销毁"><a href="#session什么时候销毁" class="headerlink" title="session什么时候销毁"></a>session什么时候销毁</h3><p><strong>1.session的持有者(即客户端浏览器)在最大无活动等待时间(MaxInactiveInterval)内无任何响应或请求 ；</strong></p><p>设置方法有许多（这里随便写两种）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.setMaxInactiveInterval(2 * 3600);  // Session保存两小时</span><br></pre></td></tr></table></figure><p>web.xml里有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;session-config&gt;</span><br><span class="line">    &lt;session-timeout&gt;10&lt;/session-timeout&gt;</span><br><span class="line">&lt;/session-config&gt;</span><br></pre></td></tr></table></figure><p><strong>2.调用Session的invalidate方法强制销毁。</strong></p><p>**3.jsp服务器重起或发生中断(这个和tomcat服务器的配置有关（默认不销毁，可以设置全部销毁），重启默认前会把session写入文件里保存，重启后会读取session文件，所以session默认时间没过还是存在的) **<br><code>注意：关闭浏览器并不会销毁session，默认下次开启浏览器会新建session，但是旧的session会在最大无活动等待时间后自动执行销毁。（文章后面教如何实现一直使用同一个session)</code></p><h3 id="session怎么识别用户（服务器怎么识别、区分用户）"><a href="#session怎么识别用户（服务器怎么识别、区分用户）" class="headerlink" title="session怎么识别用户（服务器怎么识别、区分用户）"></a>session怎么识别用户（服务器怎么识别、区分用户）</h3><p>​Session需要使用Cookie作为识别标志。HTTP协议是无状态的，Session不能依据HTTP连接来判断是否为同一客户，因此服务器向客户端浏览器发送一个名为JSESSIONID的Cookie，它的值为该Session的id（HttpSession.getId()的返回值）。Session依据该Cookie来识别是否为同一用户。</p><p>​      具体：当你第一次访问一个网站的时候,网站服务器会在响应头内加上Set-Cookie:PHPSESSID&#x3D;nj1tvkclp3jh83olcn3191sjq3(php服务器),或Set-Cookie JSESSIONID&#x3D;nj1tvkclp3jh83olcn3191sjq3(java服务器)信息,此信息是服务器随机生成的,放在服务器内存里,为了标识唯一的客户端用户,内容不会重复,这就是sessionid.该Cookie为服务器自动生成的，它的maxAge属性一般为-1，表示仅当前浏览器内有效，并且各浏览器窗口间不共享，关闭浏览器就会失效。因此同一机器的两个浏览器窗口访问服务器时，会生成两个不同的Session。但是由浏览器窗口内的链接、脚本等打开的新窗口（也就是说不是双击桌面浏览器图标等打开的窗口）除外。这类子窗口会共享父窗口的Cookie，因此会共享一个Session。</p><blockquote><p>怎么实现关闭浏览器，再打开浏览器时候使用原来的session：　　</p><p>或者关闭浏览器，再打开浏览器还是登陆的状态：</p><p>或者重新打开浏览器没有新建session：</p><p>或者使用Cookie实现短时间内不用重新登陆（当然后台也没有自动登陆，和自动登陆有区别）：</p></blockquote><p>方法：因为保存Sessionid的cookie是临时的（浏览器关闭就会销毁），所以我们自己手动创建一个持久化的cookie，用来保存sessionid；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//以下是持久化cookie，保存sessionid，实现关闭浏览器，重新打开还是使用原来的session</span><br><span class="line">session.setMaxInactiveInterval(2 * 3600);  // Session保存两小时</span><br><span class="line">Cookie cookie = new Cookie(&quot;JSESSIONID&quot;, session.getId());</span><br><span class="line">cookie.setMaxAge(2 * 3600);  // 客户端的JSESSIONID也保存两小时</span><br><span class="line">cookie.setPath(&quot;/&quot;);        </span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure><p><code>（注意，第一次访问时候遍历cookie只有一个cookie，刷新第二次访问遍历却有两个cookie，我想：第一次访问自动生成的临时cookie还没有返回给浏览器，第一次访问结束了，浏览器才有了临时的cookie，和我们手动持久化的cookie，所以第二次访问遍历获取了两个cookie，都有相同的sessionid属性。关闭浏览器，再访问，遍历只有一个cookie,因为临时的cookie关闭浏览器时候销毁了，现在只使用持久化的cookie了，里面有sessionid属性）</code></p><h2 id="如果Cookie功能警用，我们怎么识别用户"><a href="#如果Cookie功能警用，我们怎么识别用户" class="headerlink" title="如果Cookie功能警用，我们怎么识别用户"></a>如果Cookie功能警用，我们怎么识别用户</h2><p>Java Web提供了另一种解决方案：URL地址重写。</p><p>URL地址重写的原理是将该用户Session的id信息重写到URL地址中。服务器能够解析重写后的URL获取Session的id。这样即使客户端不支持Cookie，也可以使用Session来记录用户状态。HttpServletResponse类提供了encodeURL(String url)实现URL地址重写，该方法会自动判断客户端是否支持Cookie。如果客户端支持Cookie，会将URL原封不动地输出来。如果客户端不支持Cookie，则会将用户Session的id重写到URL中。</p><p><code>注意：TOMCAT判断客户端浏览器是否支持Cookie的依据是请求中是否含有Cookie。尽管客户端可能会支持Cookie，但是由于第一次请求时不会携带任何Cookie（因为并无任何Cookie可以携带），URL地址重写后的地址中仍然会带有jsessionid。当第二次访问时服务器已经在浏览器中写入Cookie了，因此URL地址重写后的地址中就不会带有jsessionid了。</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Session技术-JSP&quot;&gt;&lt;a href=&quot;#Session技术-JSP&quot; class=&quot;headerlink&quot; title=&quot;Session技术 JSP&quot;&gt;&lt;/a&gt;Session技术 JSP&lt;/h1&gt;&lt;p&gt;HTTP是无状态协议，所以每次客户端研所网页时，都要</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://xi-xi6767.github.io/2023/04/16/hello-world/"/>
    <id>http://xi-xi6767.github.io/2023/04/16/hello-world/</id>
    <published>2023-04-16T02:04:35.202Z</published>
    <updated>2023-07-02T13:27:01.806Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
